{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\heard\\\\OneDrive\\\\Desktop\\\\NextHook\\\\src\\\\components\\\\store\\\\auth-context.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  isLoggesout: () => {},\n  onlogin: (email, password) => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storeUserData = localStorage.getItem('isLoggedIn');\n    if (storeUserData === '1') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem('isLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContextProvider, {\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = AuthContextProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","AuthContext","createContext","isLoggedIn","isLoggesout","onlogin","email","password","AuthContextProvider","props","setIsLoggedIn","useEffect","storeUserData","localStorage","getItem","loginHandler","setItem","logoutHandler","removeItem","children"],"sources":["C:/Users/heard/OneDrive/Desktop/NextHook/src/components/store/auth-context.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst AuthContext = React.createContext({\r\n    isLoggedIn: false,\r\n    isLoggesout: () => { },\r\n    onlogin: (email, password) => { }\r\n})\r\nexport const AuthContextProvider = (props) => {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    useEffect(() => {\r\n        const storeUserData = localStorage.getItem('isLoggedIn');\r\n        if (storeUserData === '1') {\r\n            setIsLoggedIn(true)\r\n        }\r\n    }, [])\r\n\r\n    const loginHandler = (email, password) => {\r\n        // We should of course check email and password\r\n        // But it's just a dummy/ demo anyways\r\n        localStorage.setItem('isLoggedIn', '1');\r\n        setIsLoggedIn(true);\r\n    };\r\n\r\n    const logoutHandler = () => {\r\n        localStorage.removeItem('isLoggedIn');\r\n        setIsLoggedIn(false);\r\n    };\r\n\r\n    return (\r\n        <AuthContextProvider>\r\n            {props.children}\r\n        </AuthContextProvider>\r\n    )\r\n}\r\nexport default AuthContext;\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAExC,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAa,CAAC;EACpCC,UAAU,EAAE,KAAK;EACjBC,WAAW,EAAE,MAAM,CAAE,CAAC;EACtBC,OAAO,EAAE,CAACC,KAAK,EAAEC,QAAQ,KAAK,CAAE;AACpC,CAAC,CAAC;AACF,OAAO,MAAMC,mBAAmB,GAAIC,KAAK,IAAK;EAAA;EAC1C,MAAM,CAACN,UAAU,EAAEO,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACnDW,SAAS,CAAC,MAAM;IACZ,MAAMC,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACxD,IAAIF,aAAa,KAAK,GAAG,EAAE;MACvBF,aAAa,CAAC,IAAI,CAAC;IACvB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,YAAY,GAAG,CAACT,KAAK,EAAEC,QAAQ,KAAK;IACtC;IACA;IACAM,YAAY,CAACG,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;IACvCN,aAAa,CAAC,IAAI,CAAC;EACvB,CAAC;EAED,MAAMO,aAAa,GAAG,MAAM;IACxBJ,YAAY,CAACK,UAAU,CAAC,YAAY,CAAC;IACrCR,aAAa,CAAC,KAAK,CAAC;EACxB,CAAC;EAED,oBACI,QAAC,mBAAmB;IAAA,UACfD,KAAK,CAACU;EAAQ;IAAA;IAAA;IAAA;EAAA,QACG;AAE9B,CAAC;AAAA,GA1BYX,mBAAmB;AAAA,KAAnBA,mBAAmB;AA2BhC,eAAeP,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module"}